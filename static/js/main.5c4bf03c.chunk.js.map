{"version":3,"sources":["resources/logo.svg","Title.tsx","Renderer.tsx","LoadingScreen.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Title","className","this","props","title","subtitle","Component","Renderer","orbitControls","epsilon","mount","whaleMesh","mixer","numStars","manager","THREE","onLoad","renderer","alpha","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","appendChild","domElement","scene","camera","position","x","cameraDist","z","y","lookAt","clock","GLTFLoader","load","pubURL","gltf","radius","clipAction","animations","play","add","undefined","error","console","log","render","addLights","geometry","material","color","torus","stars","Array","fill","map","addStar","controls","OrbitControls","animate","requestAnimationFrame","update","getDelta","t","getElapsedTime","phi","Math","PI","sin","omega","cos","set","period","frac","rotation","distanceTo","circleState","torusCircleState","random","onScore","lookVec","copy","normalize","multiplyScalar","forEach","star","i","axis","rotateOnAxis","hemiLight","intensity","dirLight","ambientLight","path","process","deg","degToRad","rx","transparent","opacity","randFloatSpread","ry","rz","ref","LoadingScreen","loading","text","App","incrementScore","setState","score","state","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c4bf03c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\nimport './css/Title.css';\n\ninterface TitleProps {\n\ttitle: string;\n\tsubtitle: string;\n}\n\nclass Title extends Component<TitleProps, {}> {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Title\">\n\t\t\t\t<h1>{this.props.title}</h1>\n\t\t\t\t<p>{this.props.subtitle}</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Title;","import React, {Component} from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport './css/Renderer.css'\n\ninterface RendererProps {\n  cameraDist: number;\n  radius: number;\n  omega: number;\n  onScore(): void;\n  onLoad(): void;\n}\n\nclass Renderer extends Component<RendererProps> {\n\n  private orbitControls = false;\n  private epsilon = 1;\n\n  private mount: HTMLDivElement | null = null;\n  private whaleMesh: THREE.Object3D | null = null;\n  private mixer: THREE.AnimationMixer | null = null;\n\n  private numStars = 200;  \n\n\tcomponentDidMount() {\n\n    let manager = new THREE.LoadingManager();\n    manager.onLoad = this.props.onLoad;\n\n    let renderer = new THREE.WebGLRenderer({alpha: true});\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    renderer.setPixelRatio(window.devicePixelRatio);\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    if (this.mount) {\n      this.mount.appendChild(renderer.domElement);\n    }\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n    camera.position.x = -this.props.cameraDist;\n    camera.position.z = this.props.cameraDist;\n    camera.position.y = this.props.cameraDist/2;\n    camera.lookAt(0,0,0);\n\n    const clock = new THREE.Clock();\n\n    // Whale\n\n    const loader = new GLTFLoader(manager);\n    loader.load(this.pubURL('/models/bluewhale_textured.glb'), gltf => {\n\n      this.whaleMesh = gltf.scene;\n      this.whaleMesh.position.y = this.props.radius;\n\n      this.mixer = new THREE.AnimationMixer(this.whaleMesh);\n      this.mixer.clipAction(gltf.animations[7]).play(); // main animation\n\n      scene.add(this.whaleMesh);\n\n    }, undefined, error => {\n      console.log(\"That's a whale of an error!\");\n      console.log(error);\n    });\n\n    renderer.render(scene, camera);\n\n    // Lights\n\n    this.addLights(scene);\n\n    // Helpers\n\n\n\n    // Torus\n\n    const geometry = new THREE.TorusGeometry(8, 1, 16, 100);\n    const material = new THREE.MeshBasicMaterial({ color: 0xffcb2e });\n    const torus = new THREE.Mesh(geometry, material);\n    torus.position.y = this.props.radius;\n    scene.add(torus);\n\n    // Stars\n\n    const stars = Array(this.numStars).fill(null).map(() => this.addStar(scene, camera));\n\n    // Scene\n\n    const controls = this.orbitControls ? new OrbitControls(camera, renderer.domElement) : null;\n\n    var animate = () => {\n      requestAnimationFrame(animate);\n      if (this.mixer) { this.mixer.update(clock.getDelta()); }\n      const t = clock.getElapsedTime();\n\n      if (this.whaleMesh) {\n        // move the whale in a circle\n        const phi = Math.PI / 2; // start at top of circle\n        const y = this.props.radius * Math.sin(-this.props.omega * t + phi);\n        const z = this.props.radius * Math.cos(-this.props.omega * t + phi);\n        this.whaleMesh.position.set(0, y, z);\n        const period = 2 * Math.PI / this.props.omega;\n        const frac = (t % period) / period;\n        this.whaleMesh.rotation.x = frac * Math.PI * 2;\n        \n        // move the torus to a random point in the whale's path when passed through\n        if (this.whaleMesh.position.distanceTo(torus.position) < this.epsilon) {\n          const circleState = this.torusCircleState(Math.random() * 360);\n          torus.position.set(circleState[0].x, circleState[0].y, circleState[0].z);\n          torus.rotation.set(circleState[1].x, circleState[1].y, circleState[1].z);\n\n          this.props.onScore();\n        }\n\n        // loosely follow the whale\n        let lookVec = new THREE.Vector3().copy(this.whaleMesh.position);\n        camera.lookAt(lookVec.normalize().multiplyScalar(2));\n      }\n\n      // update stars\n      const starAmp = 0.01;\n      const starOmega = 0.5;\n      stars.forEach((star, i) => {\n        // add a little randomness to the axes\n        const axis = new THREE.Vector3(i,i*i,i*i);\n        star.rotateOnAxis(axis.normalize(), 0.02);\n        // vertical wave effect\n        star.position.y += starAmp * Math.sin(starOmega*(t + (star.position.x / 10)));\n      });\n\n      renderer.render(scene, camera);\n\n      if (controls) {controls.update();}\n    };\n    animate();\n  }\n\n  addLights(scene: THREE.Scene) {\n    var hemiLight = new THREE.HemisphereLight( 0xffffff, 0x444444 );\n    hemiLight.position.set( 0, 300, 0 );\n    hemiLight.intensity = 2;\n    scene.add(hemiLight);\n\n    var dirLight = new THREE.DirectionalLight( 0xc300ff );\n    dirLight.position.set( 75, 300, -75 );\n    dirLight.intensity = 2;\n    scene.add(dirLight);\n\n    var ambientLight = new THREE.AmbientLight( 0xffffff );\n    ambientLight.intensity = 3;\n    scene.add(ambientLight);\n  }\n\n  pubURL(path: string): string { return process.env.PUBLIC_URL + path }\n\n  torusCircleState(deg: number): [THREE.Vector3, THREE.Vector3] {\n    const z = this.props.radius * Math.cos(THREE.MathUtils.degToRad(deg));\n    const y = this.props.radius * Math.sin(THREE.MathUtils.degToRad(deg));\n\n    const rx = THREE.MathUtils.degToRad(-deg + 90)\n    return [new THREE.Vector3(0, y, z), new THREE.Vector3(rx, 0, 0)];\n  }\n\n  addStar(scene: THREE.Scene, camera: THREE.Camera) {\n    const geometry = new THREE.SphereGeometry(0.4, 4, 2);\n    const material = new THREE.MeshStandardMaterial({\n      // blue, purple\n      color: Math.random() < 0.5 ? 0x42ebe5 : 0xd037db,\n      transparent: true,\n      opacity: 0.9\n    });\n    const star = new THREE.Mesh(geometry, material);\n  \n    let [x, y, z] = Array(3).fill(0).map(() => THREE.MathUtils.randFloatSpread(150));\n    // reroll if too close to camera\n    while (new THREE.Vector3(x,y,z).distanceTo(camera.position) < 10) {\n      [x, y, z] = Array(3).fill(0).map(() => THREE.MathUtils.randFloatSpread(150));\n    }\n    const [rx, ry, rz] = Array(3).fill(0).map(() => THREE.MathUtils.randFloatSpread(Math.PI));\n  \n    star.position.set(x, y, z);\n    star.rotation.set(rx, ry, rz);\n    scene.add(star);\n    return star;\n  }\n\n  render() {\n    return (\n      <div className=\"Renderer\" ref={mount => (this.mount = mount)} />\n    )\n  }\n}\n\nexport default Renderer;","import React, {Component} from 'react';\nimport './css/LoadingScreen.css';\n\ninterface LoadingScreenProps {\n\ttext: string;\n\tloading: boolean;\n}\n\nclass LoadingScreen extends Component<LoadingScreenProps, {}> {\n\trender() {\n\t\treturn (\n\t\t\t<div className={`LoadingScreen ${this.props.loading ? \"\" : \"DoneLoading\"}`}>\n\t\t\t\t<h1>{this.props.text}</h1>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default LoadingScreen;","import React, {Component} from 'react';\nimport logo from './resources/logo.svg';\nimport './css/App.css';\nimport Title from \"./Title\";\nimport Renderer from \"./Renderer\";\nimport LoadingScreen from './LoadingScreen';\n\ninterface AppState {\n  score: number;\n  loading: boolean;\n}\n\nclass App extends Component<{}, AppState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      score: 0,\n      loading: true\n    }\n  }\n\n  incrementScore = () => {\n    this.setState({ score: this.state.score + 1 })\n  }\n\n  onLoad = () => {\n    this.setState({ loading: false });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Renderer cameraDist={70} radius={50} omega={0.3} onScore={this.incrementScore} onLoad={this.onLoad} />\n        <Title title=\"React + ThreeJS\" subtitle=\"Hope this website finds you whale.\" />\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Score: {this.state.score}</p>\n          <a href=\"https://github.com/nwager/react-threejs\" target=\"_blank\" rel=\"noreferrer\">Github Repo</a>\n        </header>\n      <LoadingScreen text=\"Loading...\" loading={this.state.loading}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}